/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      const tables = {
        tip: "Tip",
        info: "Info",
        warning: "Warning",
        danger: "Danger",
        note: "Note"
      };
      for (let key in tables) {
        this.registerMarkdownCodeBlockProcessor(key, (source, el, ctx) => __async(this, null, function* () {
          yield import_obsidian.MarkdownRenderer.renderMarkdown(source, el, ".", null);
          el.addClass("custom-block");
          el.addClass(key);
          const title = createEl("p", { text: tables[key], cls: "custom-block-title" });
          el.insertBefore(title, el.firstChild);
        }));
      }
      const colors = ["", "green", "red", "blue", "purple"];
      colors.forEach((color) => {
        this.addCommand({
          id: `Add Comments ${color.toUpperCase()}`,
          name: `Add Comments ${color.toUpperCase()}`,
          callback: () => {
            const editor = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView).editor;
            const content = editor.getSelection();
            const newContent = `<span class="comments ${color}">${content}</span>`;
            editor.replaceSelection(`${newContent}`);
          }
        });
      });
      ["tip", "note", "info", "warning", "danger"].forEach((item) => {
        this.addCommand({
          id: `Add Custom Block ${item.toUpperCase()}`,
          name: `Add Custom Block ${item.toUpperCase()}`,
          callback: () => {
            const editor = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView).editor;
            const content = editor.getSelection();
            const newContent = `\`\`\`${item}
${content}
\`\`\``;
            editor.replaceSelection(newContent);
          }
        });
      });
      this.addCommand({
        id: `Add Popover`,
        name: `Add Popover`,
        callback: () => {
          const editor = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView).editor;
          const content = editor.getSelection();
          const newContent = `<Popover content=""><span className="comments">${content}</span></Popover>`;
          editor.replaceSelection(`${newContent}`);
        }
      });
    });
  }
  onunload() {
  }
};
